{"version":3,"sources":["utils/request.ts","utils/constants.ts","services/weather.ts","utils/utils.ts","models/weather.ts","components/Spinner/index.tsx","components/Weather/index.tsx","components/UserEditor/index.tsx","pages/Home/index.tsx","router.js","index.js"],"names":["axiosInstance","axios","create","timeout","request","options","then","response","catch","error","interceptors","use","Promise","resolve","reject","OPEN_WEATHER_BASE_URL","WEATHER_REQUEST_PATH_OPTION","OPEN_WEATHER_API_KEY","process","TEMP_UNIT","getCurrentLocationWeather","payload","a","latitude","longtitude","method","url","getLocation","navigator","geolocation","getCurrentPosition","position","location","coords","longitude","err","weather","namespace","state","currentWeather","effects","getGeoLocation","_payload","call","fetchCurrentLocationWeather","put","console","log","responsePayload","cityName","data","name","temp","main","wind","icon","type","reducers","putCurrentWeather","Spinner","props","loading","className","connect","angle","celsius","title","tempUnit","isDisplayWind","toUpperCase","src","alt","Math","round","deg","speed","inputs","userInput","setTitle","setTempUnit","setIsDisplayWind","placeholder","value","onChange","e","target","checked","getLocationLoading","fetchWeatherLoading","dispatch","useState","currentLatitude","setCurrentLatitude","currentLongtitude","setCurrentLongtitude","locationError","setLocationError","useEffect","RouterConfig","history","path","component","Home","app","dva","browserHistory","createLoading","model","router","routerConf","start"],"mappings":"mUAIMA,E,OAAgBC,EAAMC,OAAO,CAClCC,QAHe,MAuBD,SAASC,EAAQC,GAC/B,OAAOL,EAAcK,GACnBC,MAAK,SAAAC,GAAQ,OAAIA,KACjBC,OAAM,SAAAC,GAAK,OAAIA,KApBlBT,EAAcU,aAAaH,SAASI,KACnC,SAAAJ,GACC,OAAOK,QAAQC,QAAQN,MAExB,SAAAE,GACC,IAAQF,EAAaE,EAAbF,SACR,OAAOK,QAAQE,OAAOP,MCdjB,IAAMQ,EAAwB,0CAExBC,EACH,UAIGC,EACZC,8IAAYD,sBAAwB,mCAExBE,EACJ,SADIA,EAEF,WCJJ,SAAeC,EAAtB,kC,4CAAO,WAAyCC,GAAzC,iBAAAC,EAAA,6DACEC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WADZ,kBAECpB,EAAQ,CACdqB,OAAQ,MACRC,IAAI,GAAD,OAAKX,GAAL,OAA6BC,EAA7B,gBAAwEO,EAAxE,gBAAwFC,EAAxF,+BAAyHP,MAJvH,4C,sBCLA,IAAMU,EAAW,uCAAG,sBAAAL,EAAA,+EAChB,IAAIV,SAAQ,SAACC,EAASC,GACzBc,UAAUC,YAAYC,oBAClB,SAACC,GACG,IAAMC,EAAsB,CACxBT,SAAUQ,EAASE,OAAOV,SAC1BC,WAAYO,EAASE,OAAOC,WAEhCrB,EAAQmB,MAEZ,SAACG,GAAD,OAASrB,EAAOqB,UAVD,2CAAH,qDC4CTC,EA3CC,CACfC,UAAW,UAEXC,MAAO,CACNC,eAAgB,MAGjBC,QAAS,CACPC,eADO,qBACQC,EADR,4EAGW,OAFSC,EADpB,EACoBA,KADpB,kBAGiBA,EAAKhB,GAHtB,cAGApB,EAHA,yBAIC,IAAIK,SAAQ,SAACC,GAAD,OAAaA,EAAQN,OAJlC,yDAMC,IAAIK,SAAQ,SAACE,GAAD,OAAYA,EAAO,EAAD,QAN/B,wDASP8B,4BATO,yHAUU,OADavB,EATvB,EASuBA,QAAasB,EATpC,EASoCA,KAAME,EAT1C,EAS0CA,IAT1C,SAUgBF,EAAKvB,EAA2BC,GAVhD,OAmBP,OATMd,EAVC,OAWPuC,QAAQC,IAAIxC,GACNyC,EAAgC,CACrCC,SAAQ,OAAE1C,QAAF,IAAEA,GAAF,UAAEA,EAAU2C,YAAZ,aAAE,EAAgBC,KAC1BC,KAAI,OAAE7C,QAAF,IAAEA,GAAF,UAAEA,EAAU2C,YAAZ,iBAAE,EAAgBG,YAAlB,aAAE,EAAsBD,KAC5BE,KAAI,OAAE/C,QAAF,IAAEA,GAAF,UAAEA,EAAU2C,YAAZ,aAAE,EAAgBI,KACtBC,KAAI,OAAEhD,QAAF,IAAEA,GAAF,UAAEA,EAAU2C,YAAZ,iBAAE,EAAgBd,QAAQ,UAA1B,aAAE,EAA4BmB,KAClCF,KAAI,OAAE9C,QAAF,IAAEA,GAAF,UAAEA,EAAU2C,YAAZ,iBAAE,EAAgBd,QAAQ,UAA1B,aAAE,EAA4BiB,MAjB5B,SAmBDR,EAAI,CACTW,KAAM,oBACNnC,QAAS2B,IArBH,2CA0BTS,SAAU,CACTC,kBADS,SACSpB,EADT,GAC8B,IAAZjB,EAAW,EAAXA,QAC1B,OAAO,2BACHiB,GADJ,IAECC,eAAgBlB,O,+BCrBLsC,EAbC,SAACC,GACb,IAAQC,EAAYD,EAAZC,QACR,OACI,mCACKA,GACG,qBAAKC,UAAU,SAAf,2BCqCDC,G,OAAAA,mBAAQ,kBAAkB,CACxC3B,QADsB,EAAGA,WAAX2B,EAnCyB,SAACH,GAAW,IAAD,IHKdI,EAMMC,EGVvB1B,EAAqDqB,EAAhExB,QAAWG,eAAkB2B,EAAmCN,EAAnCM,MAAOC,EAA4BP,EAA5BO,SAAUC,EAAkBR,EAAlBQ,cAGtD,OACC,sBAAKN,UAAU,yBAAf,UACC,qBAAKA,UAAU,QAAf,SACY,KAAVI,EAAe,kBAAkBG,cAAgBH,EAAMG,gBAEzD,sBAAKP,UAAU,kBAAf,UACC,qBAAKA,UAAU,cAAf,SACC,qBAAKQ,IAAG,iCAAqB/B,QAArB,IAAqBA,OAArB,EAAqBA,EAAgBgB,KAArC,QAAiDgB,IAAG,OAAEhC,QAAF,IAAEA,OAAF,EAAEA,EAAgBc,KAAMS,UAAU,WAE/F,sBAAKA,UAAU,gBAAf,UACC,mBAAGA,UAAU,OAAb,gBACEvB,QADF,IACEA,OADF,EACEA,EAAgBU,WAElB,oBAAGa,UAAU,OAAb,UACEK,IAAahD,EAAmBqD,KAAKC,MAAL,OAAWlC,QAAX,IAAWA,OAAX,EAAWA,EAAgBa,MAAQoB,KAAKC,OHPpCR,EGOoE,OAAC1B,QAAD,IAACA,OAAD,EAACA,EAAgBa,KHN3G,EAAVa,EAAc,EAAI,KGM0G,sBAAMH,UAAU,aAAhB,qBAElI,mBAAGA,UAAU,OAAb,SACEM,GACA,qCACC,0CACA,sBAAMN,UAAU,YAAhB,UHnB6BE,EGmBoB,OAACzB,QAAD,IAACA,GAAD,UAACA,EAAgBe,YAAjB,aAAC,EAAsBoB,IHlBzD,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MACxCF,KAAKC,MAAMT,EAAQ,IAAM,MGkBtCQ,KAAKC,MAAL,OAAWlC,QAAX,IAAWA,GAAX,UAAWA,EAAgBe,YAA3B,aAAW,EAAsBqB,OAHnC,yBCyDQZ,G,OAAAA,mBAAQ,kBAAkB,CACxCa,OADsB,EAAGxC,QACTyC,aADFd,EA9E+B,SAACH,GAC9C,IAAQM,EAA4EN,EAA5EM,MAAOY,EAAqElB,EAArEkB,SAAUX,EAA2DP,EAA3DO,SAAUY,EAAiDnB,EAAjDmB,YAAaX,EAAoCR,EAApCQ,cAAeY,EAAqBpB,EAArBoB,iBAE/D,OACC,qBAAKlB,UAAU,uBAAf,SACC,wBAAOA,UAAU,cAAjB,UACC,6BACC,yCAID,6BACC,6BACC,uBACCN,KAAK,OACLL,KAAK,QACL8B,YAAY,kBACZC,MAAOhB,EACPiB,SAAU,SAAAC,GAAC,OAAIN,EAASM,EAAEC,OAAOH,QACjCpB,UAAU,kBAIb,6BACC,+CAID,6BACC,qBAAIA,UAAU,YAAd,UACC,sBAAKA,UAAU,WAAf,UACC,uBACCN,KAAK,QACLL,KAAK,cACL+B,MAAO/D,EACPgE,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOH,QACpCI,QAASnB,IAAahD,IANxB,WAQA,sBAAK2C,UAAU,WAAf,UACC,uBACCN,KAAK,QACLL,KAAK,cACL+B,MAAO/D,EACPgE,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOH,QACpCI,QAASnB,IAAahD,IANxB,gBAUF,6BACC,wCAID,6BACC,qBAAI2C,UAAU,YAAd,UACC,sBAAKA,UAAU,gBAAf,UACC,uBACCN,KAAK,QACLL,KAAK,OACL+B,MAAM,OACNC,SAAU,SAAAC,GAAC,OAAIJ,GAAiB,IAChCM,SAA2B,IAAlBlB,IANX,QAQA,sBAAKN,UAAU,gBAAf,UACC,uBACCN,KAAK,QACLL,KAAK,OACL+B,MAAM,QACNC,SAAU,SAAAC,GAAC,OAAIJ,GAAiB,IAChCM,SAA2B,IAAlBlB,IANX,uBCeSL,G,OAAAA,mBAAQ,gBAAG3B,EAAH,EAAGA,QAASyB,EAAZ,EAAYA,QAAZ,MAA2B,CACjDzB,UACAmD,mBAAoB1B,EAAQrB,QAAQ,0BACpCgD,oBAAqB3B,EAAQrB,QAAQ,0CAHvBuB,EA7EmB,SAACH,GAClC,IAAQ6B,EAAsD7B,EAAtD6B,SAAUF,EAA4C3B,EAA5C2B,mBAAoBC,EAAwB5B,EAAxB4B,oBACtC,EAA8CE,mBAAiB,MAA/D,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAkDF,mBAAiB,MAAnE,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAA0CJ,oBAAkB,GAA5D,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA0BN,mBAAiB,IAA3C,mBAAOxB,EAAP,KAAcY,EAAd,KACA,EAAgCY,mBAAiBvE,GAAjD,mBAAOgD,EAAP,KAAiBY,EAAjB,KACA,EAA0CW,oBAAkB,GAA5D,mBAAOtB,EAAP,KAAsBY,EAAtB,KAoCA,OAlCAiB,qBAAU,WAYT,OAXA,sBAAC,4BAAA3E,EAAA,+EAEwBmE,EAAS,CAC/BjC,KAAM,2BAHR,OAEOxB,EAFP,OAKC4D,EAAmB5D,EAAST,UAC5BuE,EAAqB9D,EAASR,YAN/B,gDAQCwE,GAAiB,GARlB,wDAAD,GAWO,WACNJ,EAAmB,MACnBE,EAAqB,MACrBE,GAAiB,MAEhB,IAEHC,qBAAU,WACJF,GACAJ,GAAmBE,GAKtBJ,EAAS,CACRjC,KAAM,sCACNnC,QAN0B,CAC1BE,SAAUoE,EACVnE,WAAYqE,OAQb,CAACF,EAAiBE,IAGpB,qBAAK/B,UAAU,mBAAf,SACC,qBAAKA,UAAU,mBAAf,SAEGyB,GAAsBC,EACnB,cAAC,EAAD,CAAS3B,QAAS0B,GAAsBC,IAE1C,qCACC,qBAAK1B,UAAU,iBAAf,SACC,cAAC,EAAD,CACCI,MAAOA,EACPY,SAAUA,EACVX,SAAUA,EACVY,YAAaA,EACbX,cAAeA,EACfY,iBAAkBA,MAGpB,qBAAKlB,UAAU,mBAAf,SACC,cAAC,EAAD,CACCI,MAAOA,EACPC,SAAUA,EACVC,cAAeA,iBCrEV8B,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,cAAC,SAAD,CAAQA,QAASA,EAAjB,SACI,cAAC,QAAD,CAAOC,KAAK,IAAIC,UAAWC,OCA7BC,G,OAAMC,IAAI,CACdL,QAASM,oBAGXF,EAAI5F,IAAI+F,eAERH,EAAII,MAAMvE,GAEVmE,EAAIK,OAAOC,GAEXN,EAAIO,MAAM,W","file":"static/js/main.9159973e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst timeout = 30000;\n\nconst axiosInstance = axios.create({\n\ttimeout\n});\n\naxiosInstance.interceptors.response.use(\n\tresponse => {\n\t\treturn Promise.resolve(response);\n\t},\n\terror => {\n\t\tconst { response } = error;\n\t\treturn Promise.reject(response);\n\t}\n);\n\n/**\n * Requests a path, returning a promise.\n *\n * @param  {string} path       The path we want to request\n * @param  {object} [option]   The options we want to pass to \"fetch\"\n * @return {object}            An object containing either \"data\" or \"err\"\n */\nexport default function request(options) {\n\treturn axiosInstance(options)\n\t\t.then(response => response)\n\t\t.catch(error => error);\n}\n","export const OPEN_WEATHER_BASE_URL = 'http://api.openweathermap.org/data/2.5/';\n\nexport const WEATHER_REQUEST_PATH_OPTION = {\n\tWEATHER: 'weather',\n\tFORECAST: 'forecast',\n};\n\nexport const OPEN_WEATHER_API_KEY =\n\tprocess.env.OPEN_WEATHER_API_KEY || '54a39f3d2957566d9097443072eb5eb2';\n\nexport const TEMP_UNIT = {\n\tMETRIC: 'metric',\n\tIMPERIAL: 'imperial'\n};\n","import request from '@/utils/request';\nimport {\n\tOPEN_WEATHER_BASE_URL,\n\tWEATHER_REQUEST_PATH_OPTION,\n\tOPEN_WEATHER_API_KEY,\n} from '@/utils/constants';\nimport { ILocation } from '@/interfaces/weather';\n\nexport async function getCurrentLocationWeather(payload: ILocation) {\n\tconst { latitude, longtitude } = payload;\n\treturn request({\n\t\tmethod: 'GET',\n\t\turl: `${OPEN_WEATHER_BASE_URL}${WEATHER_REQUEST_PATH_OPTION.WEATHER}?lat=${latitude}&lon=${longtitude}&units=metric&appid=${OPEN_WEATHER_API_KEY}`,\n\t});\n}\n","import { ILocation } from '@/interfaces/weather';\n\n// get current user location in coordinate\nexport const getLocation = async (): Promise<ILocation> => {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                const location: ILocation = {\n                    latitude: position.coords.latitude,\n                    longtitude: position.coords.longitude,\n                };\n                resolve(location);\n            },\n            (err) => reject(err)\n        );\n    });\n};\n\n//conver degree into direction\nexport const getCardinalDirection = (angle: number): string => {\n    const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n    return directions[Math.round(angle / 45) % 8];\n}\n\n//conver Celsius to Fahrenheit\nexport const convertCelsiusToFahrenheit = (celsius: number): number => {\n    return celsius * 9 / 5 + 32;\n}","import { getCurrentLocationWeather } from '@/services/weather';\nimport { getLocation } from '@/utils/utils';\nimport { IWeatherBase } from '@/interfaces/weather';\n\nconst weather = {\n\tnamespace: 'weather',\n\n\tstate: {\n\t\tcurrentWeather: null\n\t},\n\n\teffects: {\n\t\t*getGeoLocation(_payload, { call }) {\n\t\t\ttry {\n\t\t\t\tconst response = yield call(getLocation);\n\t\t\t\treturn new Promise((resolve) => resolve(response));\n\t\t\t} catch (err) {\n\t\t\t\treturn new Promise((reject) => reject(err));\n\t\t\t}\n\t\t},\n\t\t*fetchCurrentLocationWeather({ payload }, { call, put }) {\n\t\t\tconst response = yield call(getCurrentLocationWeather, payload);\n\t\t\tconsole.log(response);\n\t\t\tconst responsePayload: IWeatherBase = {\n\t\t\t\tcityName: response?.data?.name,\n\t\t\t\ttemp: response?.data?.main?.temp,\n\t\t\t\twind: response?.data?.wind,\n\t\t\t\ticon: response?.data?.weather[0]?.icon,\n\t\t\t\tmain: response?.data?.weather[0]?.main,\n\t\t\t};\n\t\t\tyield put({\n\t\t\t\ttype: 'putCurrentWeather',\n\t\t\t\tpayload: responsePayload,\n\t\t\t});\n\t\t}\n\t},\n\n\treducers: {\n\t\tputCurrentWeather(state, { payload }) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentWeather: payload,\n\t\t\t};\n\t\t}\n\t},\n};\n\nexport default weather;\n","import React from \"react\";\nimport './index.scss'\n\ninterface SpinnerProps {\n    loading: Boolean;\n}\n\nconst Spinner = (props: SpinnerProps): JSX.Element => {\n    const { loading } = props;\n    return (\n        <>\n            {loading &&\n                <div className=\"loader\">\n                    Loading...\n                </div>\n            }\n        </>\n    );\n}\n\nexport default Spinner;","import React from 'react';\nimport { connect } from 'dva';\nimport { WeatherModelState } from '@/interfaces/weather';\nimport { getCardinalDirection, convertCelsiusToFahrenheit } from '@/utils/utils';\nimport { TEMP_UNIT } from '@/utils/constants';\nimport './index.scss';\n\ninterface WeatherProps {\n\tweather: WeatherModelState;\n\ttitle: string;\n\ttempUnit: string;\n\tisDisplayWind: Boolean;\n}\n\nconst Weather: React.FC<WeatherProps> = (props) => {\n\tconst { weather: { currentWeather }, title, tempUnit, isDisplayWind } = props;\n\n\n\treturn (\n\t\t<div className='weatherDetailContainer'>\n\t\t\t<div className='title'>\n\t\t\t\t{title === '' ? 'Title of widget'.toUpperCase() : title.toUpperCase()}\n\t\t\t</div>\n\t\t\t<div className='detailContainer'>\n\t\t\t\t<div className='weatherIcon'>\n\t\t\t\t\t<img src={`/images/weather/${currentWeather?.icon}.png`} alt={currentWeather?.main} className='icon' />\n\t\t\t\t</div>\n\t\t\t\t<div className='contentDetail'>\n\t\t\t\t\t<p className='city'>\n\t\t\t\t\t\t{currentWeather?.cityName}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className='temp'>\n\t\t\t\t\t\t{tempUnit === TEMP_UNIT.METRIC ? Math.round(currentWeather?.temp) : Math.round(convertCelsiusToFahrenheit(currentWeather?.temp))}<span className='tempDegree'>°</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className='wind'>\n\t\t\t\t\t\t{isDisplayWind && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<strong>Wind</strong>\n\t\t\t\t\t\t\t\t<span className='direction'>{getCardinalDirection(currentWeather?.wind?.deg)}</span>\n\t\t\t\t\t\t\t\t{Math.round(currentWeather?.wind?.speed)}km/h\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default connect(({ weather }) => ({\n\tweather\n}))(Weather);","import React from 'react';\nimport { connect } from 'dva';\nimport { TEMP_UNIT } from '@/utils/constants';\nimport './index.scss';\n\ninterface UserEditorProps {\n\ttitle: string;\n\tsetTitle: React.Dispatch<React.SetStateAction<string>>;\n\ttempUnit: string;\n\tsetTempUnit: React.Dispatch<React.SetStateAction<string>>;\n\tisDisplayWind: Boolean;\n\tsetIsDisplayWind: React.Dispatch<React.SetStateAction<Boolean>>\n}\n\n\nconst UserEditor: React.FC<UserEditorProps> = (props) => {\n\tconst { title, setTitle, tempUnit, setTempUnit, isDisplayWind, setIsDisplayWind } = props;\n\t\n\treturn (\n\t\t<div className='inputDetailContainer'>\n\t\t\t<table className='detailTable'>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\tTitle\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tname='title'\n\t\t\t\t\t\t\tplaceholder='Title of widget'\n\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\tonChange={e => setTitle(e.target.value)}\n\t\t\t\t\t\t\tclassName='textInput'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\tTemperature\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td className='selection'>\n\t\t\t\t\t\t<div className='tempUnit'>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\tname='temperature'\n\t\t\t\t\t\t\t\tvalue={TEMP_UNIT.METRIC}\n\t\t\t\t\t\t\t\tonChange={e => setTempUnit(e.target.value)}\n\t\t\t\t\t\t\t\tchecked={tempUnit === TEMP_UNIT.METRIC} />°C\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='tempUnit'>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\tname='temperature'\n\t\t\t\t\t\t\t\tvalue={TEMP_UNIT.IMPERIAL}\n\t\t\t\t\t\t\t\tonChange={e => setTempUnit(e.target.value)}\n\t\t\t\t\t\t\t\tchecked={tempUnit === TEMP_UNIT.IMPERIAL} />°F\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\tWind\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td className='selection'>\n\t\t\t\t\t\t<div className='isDisplayWind'>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\tname='wind'\n\t\t\t\t\t\t\t\tvalue='true'\n\t\t\t\t\t\t\t\tonChange={e => setIsDisplayWind(true)}\n\t\t\t\t\t\t\t\tchecked={isDisplayWind === true} />On\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='isDisplayWind'>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\tname='wind'\n\t\t\t\t\t\t\t\tvalue='false'\n\t\t\t\t\t\t\t\tonChange={e => setIsDisplayWind(false)}\n\t\t\t\t\t\t\t\tchecked={isDisplayWind === false} />Off\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>\n\t);\n};\n\nexport default connect(({ weather }) => ({\n\tinputs: weather.userInput\n}))(UserEditor);","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport { connect, SubscriptionAPI } from 'dva';\nimport { ILocation } from '@/interfaces/weather';\nimport Spinner from '@/components/Spinner';\nimport Weather from '@/components/Weather';\nimport UserEditor from '@/components/UserEditor';\nimport { TEMP_UNIT } from '@/utils/constants';\nimport './index.scss';\n\ninterface HomeProps extends SubscriptionAPI {\n\tdispatch;\n\tgetLocationLoading: Boolean;\n\tfetchWeatherLoading: Boolean;\n}\n\nconst Home: React.FC<HomeProps> = (props) => {\n\tconst { dispatch, getLocationLoading, fetchWeatherLoading } = props;\n\tconst [currentLatitude, setCurrentLatitude] = useState<number>(null);\n\tconst [currentLongtitude, setCurrentLongtitude] = useState<number>(null);\n\tconst [locationError, setLocationError] = useState<Boolean>(false);\n\tconst [title, setTitle] = useState<string>('');\n\tconst [tempUnit, setTempUnit] = useState<string>(TEMP_UNIT.METRIC);\n\tconst [isDisplayWind, setIsDisplayWind] = useState<Boolean>(true);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst location = await dispatch({\n\t\t\t\t\ttype: 'weather/getGeoLocation'\n\t\t\t\t});\n\t\t\t\tsetCurrentLatitude(location.latitude);\n\t\t\t\tsetCurrentLongtitude(location.longtitude);\n\t\t\t} catch (error) {\n\t\t\t\tsetLocationError(true);\n\t\t\t}\n\t\t})();\n\t\treturn () => {\n\t\t\tsetCurrentLatitude(null);\n\t\t\tsetCurrentLongtitude(null);\n\t\t\tsetLocationError(false);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!locationError) {\n\t\t\tif (currentLatitude && currentLongtitude) {\n\t\t\t\tconst payload: ILocation = {\n\t\t\t\t\tlatitude: currentLatitude,\n\t\t\t\t\tlongtitude: currentLongtitude\n\t\t\t\t}\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'weather/fetchCurrentLocationWeather',\n\t\t\t\t\tpayload\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [currentLatitude, currentLongtitude])\n\n\treturn (\n\t\t<div className='weatherContainer'>\n\t\t\t<div className='contentContainer'>\n\t\t\t\t{\n\t\t\t\t\t(getLocationLoading || fetchWeatherLoading)\n\t\t\t\t\t\t? (<Spinner loading={getLocationLoading || fetchWeatherLoading} />)\n\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<div className='inputContainer'>\n\t\t\t\t\t\t\t\t\t<UserEditor\n\t\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\t\tsetTitle={setTitle}\n\t\t\t\t\t\t\t\t\t\ttempUnit={tempUnit}\n\t\t\t\t\t\t\t\t\t\tsetTempUnit={setTempUnit}\n\t\t\t\t\t\t\t\t\t\tisDisplayWind={isDisplayWind}\n\t\t\t\t\t\t\t\t\t\tsetIsDisplayWind={setIsDisplayWind}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='displayContainer'>\n\t\t\t\t\t\t\t\t\t<Weather\n\t\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\t\ttempUnit={tempUnit}\n\t\t\t\t\t\t\t\t\t\tisDisplayWind={isDisplayWind}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default connect(({ weather, loading }) => ({\n\tweather,\n\tgetLocationLoading: loading.effects['weather/getGeoLocation'],\n\tfetchWeatherLoading: loading.effects['weather/fetchCurrentLocationWeather']\n}))(Home);\n","import React from 'react';\nimport { Router, Route } from 'dva/router';\nimport Home from '@/pages/Home';\n\nfunction RouterConfig({ history }) {\n  return (\n    <Router history={history}>\n        <Route path=\"/\" component={Home} />\n    </Router>\n  );\n}\n\nexport default RouterConfig;\n","import dva from 'dva';\nimport createLoading from 'dva-loading'\nimport { browserHistory } from 'dva/router';\nimport weather from '@/models/weather';\nimport routerConf from '@/router';\nimport './index.css';\n\nconst app = dva({\n  history: browserHistory\n});\n\napp.use(createLoading());\n\napp.model(weather);\n\napp.router(routerConf);\n\napp.start('#root');\n"],"sourceRoot":""}